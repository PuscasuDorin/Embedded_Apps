
External_Interrupt_App[1].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db3  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c16  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  00001cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000202c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ae  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  0000263e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e0       	ldi	r30, 0x0A	; 10
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 30       	cpi	r26, 0x04	; 4
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	27 d0       	rcall	.+78     	; 0x16e <main>
 120:	72 c0       	rjmp	.+228    	; 0x206 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <pinToggle>:

}

void pinToggle(volatile uint8_t *port, uint8_t pin)
{
	*port ^= (1 << pin);
 124:	fc 01       	movw	r30, r24
 126:	40 81       	ld	r20, Z
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <pinToggle+0xe>
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <pinToggle+0xa>
 136:	24 27       	eor	r18, r20
 138:	20 83       	st	Z, r18
 13a:	08 95       	ret

0000013c <setPin>:
}

void setPin(volatile uint8_t *port, uint8_t pin)
{
	*port |= (1 << pin);
 13c:	fc 01       	movw	r30, r24
 13e:	40 81       	ld	r20, Z
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <setPin+0xe>
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <setPin+0xa>
 14e:	24 2b       	or	r18, r20
 150:	20 83       	st	Z, r18
 152:	08 95       	ret

00000154 <resetPin>:
}

void resetPin(volatile uint8_t *port, uint8_t pin)
{
 154:	fc 01       	movw	r30, r24
	*port &= ~(1 << pin);
 156:	90 81       	ld	r25, Z
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <resetPin+0xe>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <resetPin+0xa>
 166:	20 95       	com	r18
 168:	29 23       	and	r18, r25
 16a:	20 83       	st	Z, r18
 16c:	08 95       	ret

0000016e <main>:
void setPin(volatile uint8_t *port, uint8_t pin);
void resetPin(volatile uint8_t *port, uint8_t pin);

int main(void)
{
	unsigned long counter = 0;
 16e:	c1 2c       	mov	r12, r1
 170:	d1 2c       	mov	r13, r1
 172:	76 01       	movw	r14, r12
		
    while (1) 
    {
		counter++;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	c8 1a       	sub	r12, r24
 178:	d8 0a       	sbc	r13, r24
 17a:	e8 0a       	sbc	r14, r24
 17c:	f8 0a       	sbc	r15, r24
		
		if(counter%toggle_delay == 0)
 17e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 182:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 186:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 18a:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 18e:	c7 01       	movw	r24, r14
 190:	b6 01       	movw	r22, r12
 192:	17 d0       	rcall	.+46     	; 0x1c2 <__udivmodsi4>
 194:	67 2b       	or	r22, r23
 196:	68 2b       	or	r22, r24
 198:	69 2b       	or	r22, r25
 19a:	39 f4       	brne	.+14     	; 0x1aa <main+0x3c>
		{
			pinToggle(&LED0_PORT, LED0_PIN);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	c0 df       	rcall	.-128    	; 0x124 <pinToggle>
			counter = 0;
 1a4:	c1 2c       	mov	r12, r1
 1a6:	d1 2c       	mov	r13, r1
 1a8:	76 01       	movw	r14, r12
		}
		
		if( (PIND & (1 << BUTTON1_PIN)) == 0)
 1aa:	48 99       	sbic	0x09, 0	; 9
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <main+0x4a>
		{		
			setPin(&LED1_PORT, LED1_PIN);
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	c3 df       	rcall	.-122    	; 0x13c <setPin>
 1b6:	de cf       	rjmp	.-68     	; 0x174 <main+0x6>
		}
		else
		{
			resetPin(&LED1_PORT, LED1_PIN);
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	ca df       	rcall	.-108    	; 0x154 <resetPin>
 1c0:	d9 cf       	rjmp	.-78     	; 0x174 <main+0x6>

000001c2 <__udivmodsi4>:
 1c2:	a1 e2       	ldi	r26, 0x21	; 33
 1c4:	1a 2e       	mov	r1, r26
 1c6:	aa 1b       	sub	r26, r26
 1c8:	bb 1b       	sub	r27, r27
 1ca:	fd 01       	movw	r30, r26
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <__udivmodsi4_ep>

000001ce <__udivmodsi4_loop>:
 1ce:	aa 1f       	adc	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	ee 1f       	adc	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	a2 17       	cp	r26, r18
 1d8:	b3 07       	cpc	r27, r19
 1da:	e4 07       	cpc	r30, r20
 1dc:	f5 07       	cpc	r31, r21
 1de:	20 f0       	brcs	.+8      	; 0x1e8 <__udivmodsi4_ep>
 1e0:	a2 1b       	sub	r26, r18
 1e2:	b3 0b       	sbc	r27, r19
 1e4:	e4 0b       	sbc	r30, r20
 1e6:	f5 0b       	sbc	r31, r21

000001e8 <__udivmodsi4_ep>:
 1e8:	66 1f       	adc	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	88 1f       	adc	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	1a 94       	dec	r1
 1f2:	69 f7       	brne	.-38     	; 0x1ce <__udivmodsi4_loop>
 1f4:	60 95       	com	r22
 1f6:	70 95       	com	r23
 1f8:	80 95       	com	r24
 1fa:	90 95       	com	r25
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
 200:	bd 01       	movw	r22, r26
 202:	cf 01       	movw	r24, r30
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
